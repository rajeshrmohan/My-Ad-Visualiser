
import { GoogleGenAI, Modality } from "@google/genai";
import type { AdSurface } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Utility to convert image URL to base64
const imageUrlToBase64 = async (url: string): Promise<{ base64: string, mimeType: string }> => {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch image from ${url}: ${response.statusText}`);
    }
    const blob = await response.blob();
    const mimeType = blob.type;
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            const base64 = (reader.result as string).split(',')[1];
            resolve({ base64, mimeType });
        };
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
};

export const generateAdMockup = async (
    productImageBase64: string,
    productImageMimeType: string,
    surface: AdSurface
): Promise<string> => {
    try {
        const { base64: surfaceImageBase64, mimeType: surfaceImageMimeType } = await imageUrlToBase64(surface.imageUrl);

        const prompt = `You are a professional graphic designer creating a realistic advertising mockup.
        Take the second image provided (the product) and place it seamlessly onto the main ad space within the first image (the background scene).
        Pay close attention to matching the perspective, lighting, shadows, and color grading of the background scene to make the product look like it naturally belongs there.
        Specific instructions: ${surface.promptHint}`;
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: surfaceImageBase64,
                            mimeType: surfaceImageMimeType,
                        },
                    },
                    {
                        inlineData: {
                            data: productImageBase64,
                            mimeType: productImageMimeType,
                        },
                    },
                    {
                        text: prompt,
                    },
                ],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                const imageUrl = `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
                return imageUrl;
            }
        }

        throw new Error("No image was generated by the API.");

    } catch (error) {
        console.error("Error generating ad mockup:", error);
        throw new Error(`Failed to generate mockup for ${surface.name}.`);
    }
};
